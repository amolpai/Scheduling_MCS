//Iterate while the total execution time is less than the hyperperiod and the kernel's current criticality level is less than the threshold criticality level.
    // //While the kernel's criticality level is less than the threshold criticality level, we will use the virtual deadline. After that, we will use the normal deadline.
    // while(kernel->total_exec_time < hyperperiod - 1 && kernel->curr_crit_level <= threshold_criticality_level){
    //     kernel->total_exec_time++;

    //     printf("Kernel criticality level = %d | total execution time = %d | ", kernel->curr_crit_level, kernel->total_exec_time);


    //     //First decision point : If the current job executing is -1, then the kernel is idle. Find the earliest job again from the list. 
    //     if(earliest_job == -1) {
    //         earliest_job = find_earliest_virtual_job(tasks_list, job_list, total_tasks, kernel->total_exec_time, kernel);
            
    //         if(earliest_job != -1){ 
    //             find_job_parameters(tasks_list, job_list, earliest_job, kernel);
    //         }
    //         else{
    //             printf("Kernel Idle\n");
    //             kernel->total_idle_time++; 
    //             continue;
    //         }
    //     }

    //     //Second decision point : If the job has finished execution. Update the release time and absolute deadline of the job and find the next job to execute.
    //     if(job_list[earliest_job].remaining_execution_time == 0){
    //         printf("Job %d finished execution | ", earliest_job);
    //         job_list[earliest_job].release_time = job_list[earliest_job].release_time + tasks_list[earliest_job].period;

    //         //Using the virtual deadline to find the absolute deadline of the job.
    //         job_list[earliest_job].absolute_deadline = job_list[earliest_job].release_time + tasks_list[earliest_job].virtual_deadline;

    //         //If the job has executed for more than its worst case execution time, then change the criticality level of the kernel.
    //         if(job_list[earliest_job].execution_time > tasks_list[earliest_job].worst_case_exec_time[kernel->curr_crit_level]){
    //             printf("CRITICALITY LEVEL CHANGE | ");
    //             kernel->curr_crit_level = min(MAX_CRITICALITY_LEVELS - 1, kernel->curr_crit_level + 1);
    //         }

    //         earliest_job = find_earliest_virtual_job(tasks_list, job_list, total_tasks, kernel->total_exec_time, kernel);
    //         if(earliest_job != -1){
    //             find_job_parameters(tasks_list, job_list, earliest_job, kernel);
    //         }
    //         else{
    //             printf("Kernel Idle\n");
    //             kernel->total_idle_time++; 
    //             continue;
    //         }
    //     }

    //     //Third decision point : If a job has arrived while another job is executing in the kernel.
    //     arrived_job = find_earliest_virtual_job(tasks_list, job_list, total_tasks, kernel->total_exec_time, kernel);
        
    //     //If the newly arrived job is not the previously executing job, then preempt this job and schedule the newly arrived job for execution.
    //     if(arrived_job != earliest_job) {
    //         printf("Job %d arrived | Preempting Job %d | ", arrived_job, earliest_job);
    //         // printf("Preempting job %d, arrived job %d | ", earliest_job, arrived_job);
    //         earliest_job = arrived_job;
    //         find_job_parameters(tasks_list, job_list, earliest_job, kernel);
    //     }

    //     printf("Job %d executing | Execution time %d | Remaining execution time %d\n", earliest_job, job_list[earliest_job].execution_time, job_list[earliest_job].remaining_execution_time);
    //     job_list[earliest_job].remaining_execution_time--;
    // }

    // //When the kernel's criticality level goes beyond the threshold criticality level, use the normal deadline for finding the absolute deadline.
    // for(i=0; i<total_tasks; i++){
    //     if(kernel->curr_crit_level == tasks_list[i].criticality_lvl) {
    //         job_list[i].absolute_deadline = job_list[i].release_time + tasks_list[i].relative_deadline;
    //     }
    // }

    // while(kernel->total_exec_time < hyperperiod - 1) {
    //     kernel->total_exec_time++;

    //     printf("Kernel criticality level = %d | total execution time = %d | ", kernel->curr_crit_level, kernel->total_exec_time);

    //     //First decision point : If the current job executing is -1, then the kernel is idle. Find the earliest job again from the list. 
    //     if(earliest_job == -1) {
    //         earliest_job = find_earliest_absolute_job(tasks_list, job_list, total_tasks, kernel->total_exec_time, kernel);
            
    //         if(earliest_job != -1){
    //             find_job_parameters(tasks_list, job_list, earliest_job, kernel);
    //         }
    //         else{
    //             kernel->total_idle_time++; 
    //             printf("Kernel Idle\n");
    //             continue;
    //         }
    //     }

    //     //Second decision point : If the job has finished execution. Update the release time and absolute deadline of the job and find the next job to execute.
    //     if(job_list[earliest_job].remaining_execution_time == 0){
    //         printf("Job %d finished execution | ", earliest_job);
    //         job_list[earliest_job].release_time = job_list[earliest_job].release_time + tasks_list[earliest_job].period;

    //         //Using the normal deadline to find the absolute deadline of the job.
    //         job_list[earliest_job].absolute_deadline = job_list[earliest_job].release_time + tasks_list[earliest_job].relative_deadline;

    //         //If the job has executed for more than its worst case execution time, then change the criticality level of the kernel.
    //         if(job_list[earliest_job].execution_time > tasks_list[earliest_job].worst_case_exec_time[kernel->curr_crit_level]){
    //             printf("CRITICALITY LEVEL CHANGE | ");
    //             kernel->curr_crit_level = min(MAX_CRITICALITY_LEVELS - 1, kernel->curr_crit_level + 1);
    //         }

    //         earliest_job = find_earliest_absolute_job(tasks_list, job_list, total_tasks, kernel->total_exec_time, kernel);
    //         if(earliest_job != -1){
    //             find_job_parameters(tasks_list, job_list, earliest_job, kernel);
    //         }
    //         else{
    //             printf("Kernel Idle\n");
    //             kernel->total_idle_time++; 
    //             continue;
    //         }
    //     }

    //     //Third decision point : If a job has arrived while another job is executing in the kernel.
    //     arrived_job = find_earliest_absolute_job(tasks_list, job_list, total_tasks, kernel->total_exec_time, kernel);
        
    //     //If the newly arrived job is not the previously executing job, then preempt this job and schedule the newly arrived job for execution.
    //     if(arrived_job != earliest_job) {
    //         printf("Job %d arrived | Preempting Job %d | ", arrived_job, earliest_job);
    //         earliest_job = arrived_job;
    //         find_job_parameters(tasks_list, job_list, earliest_job, kernel);
    //     }

    //     printf("Job %d executing | Execution time %d | Remaining execution time %d\n", earliest_job, job_list[earliest_job].execution_time, job_list[earliest_job].remaining_execution_time);
    //     job_list[earliest_job].remaining_execution_time--;


    // }


    // if(job_list[job_number].remaining_execution_time == 0){
    //     //Using a random number generator to find the execution time of the task. 
    //     int actual_exec_time = find_actual_execution_time(tasks_list[job_number].WCET[kernel->curr_crit_level]);
    //     job_list[job_number].execution_time = actual_exec_time;
    //     job_list[job_number].remaining_execution_time = actual_exec_time;   
    // }
