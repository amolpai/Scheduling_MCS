Algorithm for allocation of tasks to cores:
Step 1: Sort M tasks in non-decreasing order of their periods.

------------------------------------------------------------------------------------------------------------------------
Step 2: 
low_period_utilisation = 0
For each task i in M:
    begin
    if(2*i.P - 2*i.E[0] >= SDT) 
        i = high_period_task
    else
        i = low_period_task
        low_period_utilisation += i.util[0]
    endLoop

low_period_cores = [1 to (ceil)low_period_utilisation]     //List of cores for low period tasks
high_period_cores = [(ceil)low_period_utilisation + 1 to N]
------------------------------------------------------------------------------------------------------------------------
Step 3: (EXCEPTIONAL TASKS)
Initialise K to 1
MAX_UTIL[] array is the limit of utilization per criticality level to be imposed per core.

for each task i in M:
    beginLoop
    x = i.criticality_level
    flag = 1

    //For exceptional cases, the utilisation of the task will be greater than the max limit imposed.
    if i.util[x] > MAX_UTIL[x]:
        //The remaining utilisation of core at each criticality_level must be greater than the utilisation of task.
        for criticality level = 0 to x:
            if K.rem_util[level] < i.util[level]
                flag = 0;
                break;

        if flag == 0:       //If flag is 0, we cannot allocate this task to current core. Try next core.
            K = K+1
            if K > Total number of cores:
                print "Insufficient number of cores"
                exit
            Repeat the process for same task i
        else:
            flag = 0

            //Now try to allocate the task to core K
            if schedulability conditions of core K are satisfied after task i is allocated to core K:
                Allocate task i to core K and update the x factor and threshold criticality level of core K

                //After allocating the task, update the remaining utilisation of core at each criticality level
                for criticality level = 0 to x:
                    K.rem_util[level] = K.rem_util[level] - i.util[level]
                flag = 1
            else:
                Remove task i from core K.

        if flag == 0:       //If flag is 0, we cannot allocate this task to current core. Try next core.
            K = K+1
            if K > Total number of cores:
                print "Insufficient number of cores"
                exit
            Repeat the process for same task i
    endLoop


------------------------------------------------------------------------------------------------------------------------
Step 4:
//First allocate all the low period tasks. Make sure that the utilisation of one criticality level in a particular core does not exceed its maximum value.

Initialise K to 1   //Start core count from 1.
for criticality level x = 4 to 0:
    beginLoop
    for each task i in low_period_tasks with i.criticality == x:
        beginLoop
        //The remaining utilisation of core at each criticality_level must be greater than the utilisation of task.
        for criticality level = 0 to x:
            if K.rem_util[level] < i.util[level]
                flag = 0;
                break;

        if flag == 0:       //If flag is 0, we cannot allocate this task to current core. Try next core.
            K = K+1
            if K > Total number of cores:
                print "Insufficient number of cores"
                exit
            Repeat the process for same task i
        
        //Now try allocating the task to core K
        flag = 0           
        if total_utilisation of core K at criticality level x < MAX Utilization at criticality level x:
            
            if schedulability conditions of core K are satisfied after allocating task i to core K:
                Allocate task i to core K and update the x factor and threshold criticality level of core K
                
                //After allocating the task, update the remaining utilisation of core at each criticality level
                for criticality level = 0 to x:
                    K.rem_util[level] = K.rem_util[level] - i.util[level]

                flag = 1
            else:
                Remove task i from core K.

        if flag == 0:
            K = K+1
            if K > Number of low_period_cores:
                Add one more core to the list.
            else if K > Total number of cores:
                print "Insufficient number of cores"
                Exit.
            Repeat the process for the same task i.
        endLoop
    endLoop
                        
------------------------------------------------------------------------------------------------------------------------
Step 5:
Repeat Step 4 for high period tasks. 
Additional check required: Check if a task can be allocated to the low period cores or not. If possible, allocate the task to one of the low period cores and then move on to the high period cores.
This is required to minimize the number of cores to be used.            
