PROCRASTINATION SCHEDULING FOR MULTI-CRITICALITY SYSTEMS IN A MULTI-CORE ENVIRONMENT.

For compiling and executing the program, run the commands.sh file. 
./commands.sh

This will execute the makefile, run the program and store the output in output.txt

Files in the zip file:
1) commands.sh:
    Contains the commands needed for executing the makefile, run the program and store the output in output.txt. After successfully running the program, it will remove all the .o files and executable.

2) input.txt: 
    Contains the task set.
    The first line contains the number of tasks.
    Each subsequent line contains the parameters of each task which are:
    Phase, Relative deadline, Criticality level, WCET for each criticality level

3) output.txt, output_*.txt:
    Contains the output of the scheduling. 
    output.txt contains the allocation of the tasks and the final processor statistics after the scheduling is done.
    Each of output_*.txt contains the schedule for the corresponding core. For example, output_0.txt contains the schedule of core 0.
    Each line of output_*.txt contains the following:
    1. The decision time, point, the core and the current crit_level.
    2.1 If the decision is ARRIVAL, then the type of jobs that have arrived (Normal / Discarded), and the queue in which it is inserted (Ready for normal, Ready / Discarded for discarded)
    2.2 If the decision is COMPLETION, then the job that completed execution. If the ready queue is not empty, then the information about new job that is scheduled. If the ready queue is empty, the information about procrastination interval.
    2.3 If the decision is TIMER_EXPIRY, then the information about job arrivals and the new job that is scheduled.
    2.4 If the decision is CRIT_CHANGE, then the information about updating the ready queue and the discarded queue for each core.
    3. Finally, if a job is scheduled, information about the scheduled job is printed.


4) data_structures.h: 
    Contains the information about ADTs used. The ADTs used are:
    a. Structure for task
    b. Structure for taskset containing list of all tasks
    c. Structure for a job
    d. Structure for a job queue containing list of all jobs.
    e. Structure for a core
    f. Structure for a processor containing list of all cores.
    g. Structure for the decision.

5) auxiliary_functions.h and auxiliary_functions.c:
    These two files contains the helper functions needed while scheduling. 
    List of functions:
    a. randnum
    b. gcd
    c. min
    d. max
    e. period_comparator
    f. deadline_comparator
    g. print_task_list
    h. print_job_list
    i. print_total_utilization
    j. print_processor
    k. compare_jobs
    l. find_actual_execution_time
    m. set_virtual_deadlines
    n. reset_virtual_deadlines

6) check_functions.h and check_functions.c:
    These two files contains the functions needed for checking the schedulability of the taskset. If the taskset is schedulable, it returns the x factor for the taskset.
    List of functions:
    a. find_total_utilization
    b. check_schedulability

7) allocation_functions.h and allocation_functions.c:
    These two files contains the functions for initialization of the processor and allocation of tasks to each core in the processor.
    The allotment of tasks is done in such a way that each core will have high criticality tasks with a maximum utilisation of 70%.
    List of functions:
    a. initialize_processor
    b. allocate
    c. allocate_tasks_to_cores

8) scheduler_functions.h and scheduler_functions.c:
    These two files contains the functions needed for scheduling the taskset. The scheduling will be done for all cores simultaneously by finding the earliest decision point among all cores.
    Each core will have a separate ready queue which will contain the jobs ready for execution. 
    List of functions:
    a. get_taskset
    b. find_superhyperperiod
    c. find_max_slack
    d. find_earliest_arrival_job
    e. find_decision_point
    f. insert_job_in_discarded_queue
    g. remove_jobs_from_discarded_queue
    h. insert_job_in_ready_queue
    i. remove_jobs_from_ready_queue
    j. insert_discarded_jobs_in_ready_queue
    k. accommodate_discarded_jobs
    l. find_job_parameters
    m. update_job_arrivals
    n. update_job_removal
    o. schedule_new_job
    p. find_job_list
    q. find_procrastination_interval
    r. schedule_taskset
    s. runtime_scheduler

9)driver.c: 
    Contains the driver code to run the program. The user is responsible for:
    1. Initializing the taskset using get_taskset function
    2. Initializing the processor using the initialize_processor function.
    3. Running the runtime_scheduler function to schedule the taskset.